load("//kernel:templates.bzl", "kernel_test")

cc_library(
    name = "kernel",
    srcs = [
        "kernel.cc",
    ],
    hdrs = [
        "kernel.h",
    ],
    visibility = [
        "//visibility:public",
    ],
    deps = [
        "//util:status",
    ],
)

cc_library(
    name = "cxx",
    visibility = [
        "//visibility:public",
    ],
    deps = [":new"] + select({
        "//tools/toolchain:i386": [
            ":atexit",
            ":memcpy",
            ":virtual",
            ":stack_smashing_protector",
        ],
        "//conditions:default": [
        ],
    }),
)

cc_library(
    name = "virtual",
    srcs = [
        "virtual.cc",
    ],
    hdrs = [
        "virtual.h",
    ],
    deps = [
        ":kernel",
    ],
)

cc_library(
    name = "atexit",
    srcs = [
        "atexit.cc",
    ],
    hdrs = [
        "atexit.h",
    ],
)

cc_library(
    name = "new",
    srcs = [
        "new.cc",
    ],
    hdrs = [
        "new.h",
    ],
    visibility = [
        "//visibility:public",
    ],
    deps = [
        ":kernel",
    ],
)

cc_library(
    name = "memcpy",
    srcs = [
        "memcpy.cc",
    ],
    hdrs = [
        "memcpy.h",
    ],
)

cc_library(
    name = "stack_smashing_protector",
    srcs = [
        "stack_smashing_protector.cc",
    ],
    hdrs = [
        "stack_smashing_protector.h",
    ],
    deps = [
        ":kernel",
    ],
)

kernel_test(
    name = "stack_smashing_protector_ktest",
    srcs = [
        "stack_smashing_protector_ktest.cc",
    ],
    binary_copts = [
        # Ensure stack smashing is enabled for function.
        "-fstack-protector-all",
    ],
    # Instead of checking for end of the ktest, we instead check for stack smashing detection.
    magic_string = "Stack smashing detected",
    deps = [
        "//kernel/arch:init",
        "//kernel/testing:macros",
    ],
)
